
LCDwith linefollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  0000027c  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a66  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000806  00000000  00000000  00000add  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000199  00000000  00000000  000012e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b6  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000181  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000417  00000000  00000000  00001949  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  7a:	0c 94 3c 01 	jmp	0x278	; 0x278 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z8disp_cmdj>:
	disp_cmd(0X06);
}

void disp_cmd(unsigned int cmd)
{
	PORTB=((cmd & 0XF0)+0X04);
  82:	9c 01       	movw	r18, r24
  84:	20 7f       	andi	r18, 0xF0	; 240
  86:	33 27       	eor	r19, r19
  88:	2c 5f       	subi	r18, 0xFC	; 252
  8a:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	e9 ef       	ldi	r30, 0xF9	; 249
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <_Z8disp_cmdj+0xe>
  94:	00 c0       	rjmp	.+0      	; 0x96 <_Z8disp_cmdj+0x14>
  96:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB - 0X04;
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	94 50       	subi	r25, 0x04	; 4
  9c:	98 bb       	out	0x18, r25	; 24
	PORTB=(((cmd<<4)& 0XF0)+0X04);
  9e:	82 95       	swap	r24
  a0:	80 7f       	andi	r24, 0xF0	; 240
  a2:	8c 5f       	subi	r24, 0xFC	; 252
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	89 ef       	ldi	r24, 0xF9	; 249
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <_Z8disp_cmdj+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_Z8disp_cmdj+0x2e>
  b0:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB-0X04;
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	84 50       	subi	r24, 0x04	; 4
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	08 95       	ret

000000ba <_Z8lcd_initv>:
	}
	return 0;
}
void lcd_init()
{
	disp_cmd(0X02);
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X28);
  c2:	88 e2       	ldi	r24, 0x28	; 40
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X0C);
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X06);
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
  da:	08 95       	ret

000000dc <_Z9disp_datai>:
	PORTB=PORTB-0X04;
	
}
void disp_data( int cmd)
{
	PORTB=((cmd  & 0XF0)+0X05);
  dc:	9c 01       	movw	r18, r24
  de:	20 7f       	andi	r18, 0xF0	; 240
  e0:	33 27       	eor	r19, r19
  e2:	2b 5f       	subi	r18, 0xFB	; 251
  e4:	28 bb       	out	0x18, r18	; 24
  e6:	e9 ef       	ldi	r30, 0xF9	; 249
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <_Z9disp_datai+0xe>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <_Z9disp_datai+0x14>
  f0:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB - 0X04;
  f2:	28 b3       	in	r18, 0x18	; 24
  f4:	24 50       	subi	r18, 0x04	; 4
  f6:	28 bb       	out	0x18, r18	; 24
	PORTB=(((cmd <<4)& 0XF0)+0X05);
  f8:	82 95       	swap	r24
  fa:	92 95       	swap	r25
  fc:	90 7f       	andi	r25, 0xF0	; 240
  fe:	98 27       	eor	r25, r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	98 27       	eor	r25, r24
 104:	8b 5f       	subi	r24, 0xFB	; 251
 106:	88 bb       	out	0x18, r24	; 24
 108:	89 ef       	ldi	r24, 0xF9	; 249
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <_Z9disp_datai+0x30>
 110:	00 c0       	rjmp	.+0      	; 0x112 <_Z9disp_datai+0x36>
 112:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB-0X04;
 114:	88 b3       	in	r24, 0x18	; 24
 116:	84 50       	subi	r24, 0x04	; 4
 118:	88 bb       	out	0x18, r24	; 24
 11a:	08 95       	ret

0000011c <_Z11disp_stringPc>:
	
}

void disp_string( char *str)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!='\0')
 122:	88 81       	ld	r24, Y
 124:	88 23       	and	r24, r24
 126:	39 f0       	breq	.+14     	; 0x136 <_Z11disp_stringPc+0x1a>
	_delay_ms(1);
	PORTB=PORTB-0X04;
	
}

void disp_string( char *str)
 128:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;
	while (str[i]!='\0')
	{
		disp_data (str[i]);
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
}

void disp_string( char *str)
{
	int i=0;
	while (str[i]!='\0')
 130:	89 91       	ld	r24, Y+
 132:	81 11       	cpse	r24, r1
 134:	fa cf       	rjmp	.-12     	; 0x12a <_Z11disp_stringPc+0xe>
	{
		disp_data (str[i]);
		i++;
		
	}
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <main>:



int main(void)
{
	DDRC=0X00;
 13c:	14 ba       	out	0x14, r1	; 20
	PORTC=0X00;
 13e:	15 ba       	out	0x15, r1	; 21
	
	DDRD=0XFF;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	81 bb       	out	0x11, r24	; 17
	DDRB = 0XFF;
 144:	87 bb       	out	0x17, r24	; 23
	
	lcd_init();
 146:	0e 94 5d 00 	call	0xba	; 0xba <_Z8lcd_initv>
	
disp_cmd(0X80);
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
disp_string("line follower");
 152:	80 e6       	ldi	r24, 0x60	; 96
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11disp_stringPc>
	
	while(1)
	{
		if(PINC == 0b00000001)		//if Left Sensor comes upon the black line
		{
			PORTD =0X10;
 15a:	c0 e1       	ldi	r28, 0x10	; 16
			_delay_ms(30);
			// Turn RIGHT
		}
		else if(PINC == 0b10000000)
		{
			PORTD =0b01010000;
 15c:	10 e5       	ldi	r17, 0x50	; 80
			        	// Turn LEFT
		}
		
		else if(PINC == 0b00000010)	// if Right Sensorcomes upon the black line
		{
			PORTD =0x40;
 15e:	d0 e4       	ldi	r29, 0x40	; 64
disp_cmd(0X80);
disp_string("line follower");
	
	while(1)
	{
		if(PINC == 0b00000001)		//if Left Sensor comes upon the black line
 160:	83 b3       	in	r24, 0x13	; 19
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	01 f5       	brne	.+64     	; 0x1a6 <main+0x6a>
		{
			PORTD =0X10;
 166:	c2 bb       	out	0x12, r28	; 18
 168:	83 ec       	ldi	r24, 0xC3	; 195
 16a:	99 e0       	ldi	r25, 0x09	; 9
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <main+0x30>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x36>
 172:	00 00       	nop
			_delay_ms(10);
			disp_cmd(0X01);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 17c:	83 ec       	ldi	r24, 0xC3	; 195
 17e:	99 e0       	ldi	r25, 0x09	; 9
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0x44>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x4a>
 186:	00 00       	nop
			_delay_ms(10);
			disp_cmd(0X80);
 188:	80 e8       	ldi	r24, 0x80	; 128
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_string("left");
 190:	8e e6       	ldi	r24, 0x6E	; 110
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11disp_stringPc>
 198:	8b e4       	ldi	r24, 0x4B	; 75
 19a:	9d e1       	ldi	r25, 0x1D	; 29
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0x60>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x66>
 1a2:	00 00       	nop
 1a4:	dd cf       	rjmp	.-70     	; 0x160 <main+0x24>
			
			_delay_ms(30);    
			        	// Turn LEFT
		}
		
		else if(PINC == 0b00000010)	// if Right Sensorcomes upon the black line
 1a6:	83 b3       	in	r24, 0x13	; 19
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	01 f5       	brne	.+64     	; 0x1ec <main+0xb0>
		{
			PORTD =0x40;
 1ac:	d2 bb       	out	0x12, r29	; 18
 1ae:	83 ec       	ldi	r24, 0xC3	; 195
 1b0:	99 e0       	ldi	r25, 0x09	; 9
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x76>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x7c>
 1b8:	00 00       	nop
			_delay_ms(10);
			disp_cmd(0X01);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 1c2:	83 ec       	ldi	r24, 0xC3	; 195
 1c4:	99 e0       	ldi	r25, 0x09	; 9
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0x8a>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x90>
 1cc:	00 00       	nop
			_delay_ms(10);
			disp_cmd(0X80);
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_string("right");
 1d6:	83 e7       	ldi	r24, 0x73	; 115
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11disp_stringPc>
 1de:	8b e4       	ldi	r24, 0x4B	; 75
 1e0:	9d e1       	ldi	r25, 0x1D	; 29
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0xa6>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0xac>
 1e8:	00 00       	nop
 1ea:	ba cf       	rjmp	.-140    	; 0x160 <main+0x24>
			_delay_ms(30);
			// Turn RIGHT
		}
		else if(PINC == 0b10000000)
 1ec:	83 b3       	in	r24, 0x13	; 19
 1ee:	80 38       	cpi	r24, 0x80	; 128
 1f0:	01 f5       	brne	.+64     	; 0x232 <main+0xf6>
		{
			PORTD =0b01010000;
 1f2:	12 bb       	out	0x12, r17	; 18
 1f4:	83 ec       	ldi	r24, 0xC3	; 195
 1f6:	99 e0       	ldi	r25, 0x09	; 9
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0xbc>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0xc2>
 1fe:	00 00       	nop
			_delay_ms(10);
			disp_cmd(0X01);
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 208:	83 ec       	ldi	r24, 0xC3	; 195
 20a:	99 e0       	ldi	r25, 0x09	; 9
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <main+0xd0>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0xd6>
 212:	00 00       	nop
			_delay_ms(10);
			disp_cmd(0X80);
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_string("forward");
 21c:	89 e7       	ldi	r24, 0x79	; 121
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11disp_stringPc>
 224:	8b e4       	ldi	r24, 0x4B	; 75
 226:	9d e1       	ldi	r25, 0x1D	; 29
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0xec>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0xf2>
 22e:	00 00       	nop
 230:	97 cf       	rjmp	.-210    	; 0x160 <main+0x24>
			_delay_ms(30);					// Move Forward
		}
		else if (PINC == 0b00000000)
 232:	83 b3       	in	r24, 0x13	; 19
 234:	81 11       	cpse	r24, r1
 236:	94 cf       	rjmp	.-216    	; 0x160 <main+0x24>
		{
			PORTD= 0X00;
 238:	12 ba       	out	0x12, r1	; 18
 23a:	83 ec       	ldi	r24, 0xC3	; 195
 23c:	99 e0       	ldi	r25, 0x09	; 9
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0x102>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0x108>
 244:	00 00       	nop
			_delay_ms(10);
			disp_cmd(0X01);
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 24e:	83 ec       	ldi	r24, 0xC3	; 195
 250:	99 e0       	ldi	r25, 0x09	; 9
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x116>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x11c>
 258:	00 00       	nop
			_delay_ms(10);
			disp_cmd(0X80);
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_string("stop");
 262:	81 e8       	ldi	r24, 0x81	; 129
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11disp_stringPc>
 26a:	8b e4       	ldi	r24, 0x4B	; 75
 26c:	9d e1       	ldi	r25, 0x1D	; 29
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0x132>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x138>
 274:	00 00       	nop
 276:	74 cf       	rjmp	.-280    	; 0x160 <main+0x24>

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
